@0xFFFFFFFFFFFFFFFF;  # unique file ID, generated by `capnp id`


struct Heartbeat {
    type @0 :UInt8;
    autopilot @1 :UInt8;
    baseMode @2 :UInt8;
    customMode @3 :UInt32;
    systemStatus @4 :UInt8;
    mavlinkVersion @5 :UInt8;
}


struct SysStatus {
    onboardControlSensorsPresent @0 :UInt32;
    onboardControlSensorsEnabled @1 :UInt32;
    onboardControlSensorsHealth @2 :UInt32;
    load @3 :UInt16;
    voltageBattery @4 :UInt16;
    currentBattery @5 :Int16;
    batteryRemaining @6 :Int8;
    dropRateComm @7 :UInt16;
    errorsComm @8 :UInt16;
    errorsCount1 @9 :UInt16;
    errorsCount2 @10 :UInt16;
    errorsCount3 @11 :UInt16;
    errorsCount4 @12 :UInt16;
}


struct SystemTime {
    timeUnixUsec @0 :UInt64;
    timeBootMs @1 :UInt32;
}


struct Ping {
    timeUsec @0 :UInt64;
    seq @1 :UInt32;
    targetSystem @2 :UInt8;
    targetComponent @3 :UInt8;
}


struct ChangeOperatorControl {
    targetSystem @0 :UInt8;
    controlRequest @1 :UInt8;
    version @2 :UInt8;
    passkey @3 :Text;
}


struct ChangeOperatorControlAck {
    gcsSystemId @0 :UInt8;
    controlRequest @1 :UInt8;
    ack @2 :UInt8;
}


struct AuthKey {
    key @0 :Text;
}


struct SetMode {
    targetSystem @0 :UInt8;
    baseMode @1 :UInt8;
    customMode @2 :UInt32;
}


struct ParamRequestRead {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    paramId @2 :Text;
    paramIndex @3 :Int16;
}


struct ParamRequestList {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
}


struct ParamValue {
    paramId @0 :Text;
    paramValue @1 :Float32;
    paramType @2 :UInt8;
    paramCount @3 :UInt16;
    paramIndex @4 :UInt16;
}


struct ParamSet {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    paramId @2 :Text;
    paramValue @3 :Float32;
    paramType @4 :UInt8;
}


struct GpsRawInt {
    timeUsec @0 :UInt64;
    fixType @1 :UInt8;
    lat @2 :Int32;
    lon @3 :Int32;
    alt @4 :Int32;
    eph @5 :UInt16;
    epv @6 :UInt16;
    vel @7 :UInt16;
    cog @8 :UInt16;
    satellitesVisible @9 :UInt8;
}


struct GpsStatus {
    satellitesVisible @0 :UInt8;
    satellitePrn @1 :UInt8;
    satelliteUsed @2 :UInt8;
    satelliteElevation @3 :UInt8;
    satelliteAzimuth @4 :UInt8;
    satelliteSnr @5 :UInt8;
}


struct ScaledImu {
    timeBootMs @0 :UInt32;
    xacc @1 :Int16;
    yacc @2 :Int16;
    zacc @3 :Int16;
    xgyro @4 :Int16;
    ygyro @5 :Int16;
    zgyro @6 :Int16;
    xmag @7 :Int16;
    ymag @8 :Int16;
    zmag @9 :Int16;
}


struct RawImu {
    timeUsec @0 :UInt64;
    xacc @1 :Int16;
    yacc @2 :Int16;
    zacc @3 :Int16;
    xgyro @4 :Int16;
    ygyro @5 :Int16;
    zgyro @6 :Int16;
    xmag @7 :Int16;
    ymag @8 :Int16;
    zmag @9 :Int16;
}


struct RawPressure {
    timeUsec @0 :UInt64;
    pressAbs @1 :Int16;
    pressDiff1 @2 :Int16;
    pressDiff2 @3 :Int16;
    temperature @4 :Int16;
}


struct ScaledPressure {
    timeBootMs @0 :UInt32;
    pressAbs @1 :Float32;
    pressDiff @2 :Float32;
    temperature @3 :Int16;
}


struct Attitude {
    timeBootMs @0 :UInt32;
    roll @1 :Float32;
    pitch @2 :Float32;
    yaw @3 :Float32;
    rollspeed @4 :Float32;
    pitchspeed @5 :Float32;
    yawspeed @6 :Float32;
}


struct AttitudeQuaternion {
    timeBootMs @0 :UInt32;
    q1 @1 :Float32;
    q2 @2 :Float32;
    q3 @3 :Float32;
    q4 @4 :Float32;
    rollspeed @5 :Float32;
    pitchspeed @6 :Float32;
    yawspeed @7 :Float32;
}


struct LocalPositionNed {
    timeBootMs @0 :UInt32;
    x @1 :Float32;
    y @2 :Float32;
    z @3 :Float32;
    vx @4 :Float32;
    vy @5 :Float32;
    vz @6 :Float32;
}


struct GlobalPositionInt {
    timeBootMs @0 :UInt32;
    lat @1 :Int32;
    lon @2 :Int32;
    alt @3 :Int32;
    relativeAlt @4 :Int32;
    vx @5 :Int16;
    vy @6 :Int16;
    vz @7 :Int16;
    hdg @8 :UInt16;
}


struct RcChannelsScaled {
    timeBootMs @0 :UInt32;
    port @1 :UInt8;
    chan1Scaled @2 :Int16;
    chan2Scaled @3 :Int16;
    chan3Scaled @4 :Int16;
    chan4Scaled @5 :Int16;
    chan5Scaled @6 :Int16;
    chan6Scaled @7 :Int16;
    chan7Scaled @8 :Int16;
    chan8Scaled @9 :Int16;
    rssi @10 :UInt8;
}


struct RcChannelsRaw {
    timeBootMs @0 :UInt32;
    port @1 :UInt8;
    chan1Raw @2 :UInt16;
    chan2Raw @3 :UInt16;
    chan3Raw @4 :UInt16;
    chan4Raw @5 :UInt16;
    chan5Raw @6 :UInt16;
    chan6Raw @7 :UInt16;
    chan7Raw @8 :UInt16;
    chan8Raw @9 :UInt16;
    rssi @10 :UInt8;
}


struct ServoOutputRaw {
    timeUsec @0 :UInt32;
    port @1 :UInt8;
    servo1Raw @2 :UInt16;
    servo2Raw @3 :UInt16;
    servo3Raw @4 :UInt16;
    servo4Raw @5 :UInt16;
    servo5Raw @6 :UInt16;
    servo6Raw @7 :UInt16;
    servo7Raw @8 :UInt16;
    servo8Raw @9 :UInt16;
}


struct MissionRequestPartialList {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    startIndex @2 :Int16;
    endIndex @3 :Int16;
}


struct MissionWritePartialList {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    startIndex @2 :Int16;
    endIndex @3 :Int16;
}


struct MissionItem {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    seq @2 :UInt16;
    frame @3 :UInt8;
    command @4 :UInt16;
    current @5 :UInt8;
    autocontinue @6 :UInt8;
    param1 @7 :Float32;
    param2 @8 :Float32;
    param3 @9 :Float32;
    param4 @10 :Float32;
    x @11 :Float32;
    y @12 :Float32;
    z @13 :Float32;
}


struct MissionRequest {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    seq @2 :UInt16;
}


struct MissionSetCurrent {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    seq @2 :UInt16;
}


struct MissionCurrent {
    seq @0 :UInt16;
}


struct MissionRequestList {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
}


struct MissionCount {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    count @2 :UInt16;
}


struct MissionClearAll {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
}


struct MissionItemReached {
    seq @0 :UInt16;
}


struct MissionAck {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    type @2 :UInt8;
}


struct SetGpsGlobalOrigin {
    targetSystem @0 :UInt8;
    latitude @1 :Int32;
    longitude @2 :Int32;
    altitude @3 :Int32;
}


struct GpsGlobalOrigin {
    latitude @0 :Int32;
    longitude @1 :Int32;
    altitude @2 :Int32;
}


struct ParamMapRc {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    paramId @2 :Text;
    paramIndex @3 :Int16;
    parameterRcChannelIndex @4 :UInt8;
    paramValue0 @5 :Float32;
    scale @6 :Float32;
    paramValueMin @7 :Float32;
    paramValueMax @8 :Float32;
}


struct SafetySetAllowedArea {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    frame @2 :UInt8;
    p1X @3 :Float32;
    p1Y @4 :Float32;
    p1Z @5 :Float32;
    p2X @6 :Float32;
    p2Y @7 :Float32;
    p2Z @8 :Float32;
}


struct SafetyAllowedArea {
    frame @0 :UInt8;
    p1X @1 :Float32;
    p1Y @2 :Float32;
    p1Z @3 :Float32;
    p2X @4 :Float32;
    p2Y @5 :Float32;
    p2Z @6 :Float32;
}


struct AttitudeQuaternionCov {
    timeBootMs @0 :UInt32;
    q @1 :Float32;
    rollspeed @2 :Float32;
    pitchspeed @3 :Float32;
    yawspeed @4 :Float32;
    covariance @5 :Float32;
}


struct NavControllerOutput {
    navRoll @0 :Float32;
    navPitch @1 :Float32;
    navBearing @2 :Int16;
    targetBearing @3 :Int16;
    wpDist @4 :UInt16;
    altError @5 :Float32;
    aspdError @6 :Float32;
    xtrackError @7 :Float32;
}


struct GlobalPositionIntCov {
    timeBootMs @0 :UInt32;
    timeUtc @1 :UInt64;
    estimatorType @2 :UInt8;
    lat @3 :Int32;
    lon @4 :Int32;
    alt @5 :Int32;
    relativeAlt @6 :Int32;
    vx @7 :Float32;
    vy @8 :Float32;
    vz @9 :Float32;
    covariance @10 :Float32;
}


struct LocalPositionNedCov {
    timeBootMs @0 :UInt32;
    timeUtc @1 :UInt64;
    estimatorType @2 :UInt8;
    x @3 :Float32;
    y @4 :Float32;
    z @5 :Float32;
    vx @6 :Float32;
    vy @7 :Float32;
    vz @8 :Float32;
    covariance @9 :Float32;
}


struct RcChannels {
    timeBootMs @0 :UInt32;
    chancount @1 :UInt8;
    chan1Raw @2 :UInt16;
    chan2Raw @3 :UInt16;
    chan3Raw @4 :UInt16;
    chan4Raw @5 :UInt16;
    chan5Raw @6 :UInt16;
    chan6Raw @7 :UInt16;
    chan7Raw @8 :UInt16;
    chan8Raw @9 :UInt16;
    chan9Raw @10 :UInt16;
    chan10Raw @11 :UInt16;
    chan11Raw @12 :UInt16;
    chan12Raw @13 :UInt16;
    chan13Raw @14 :UInt16;
    chan14Raw @15 :UInt16;
    chan15Raw @16 :UInt16;
    chan16Raw @17 :UInt16;
    chan17Raw @18 :UInt16;
    chan18Raw @19 :UInt16;
    rssi @20 :UInt8;
}


struct RequestDataStream {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    reqStreamId @2 :UInt8;
    reqMessageRate @3 :UInt16;
    startStop @4 :UInt8;
}


struct DataStream {
    streamId @0 :UInt8;
    messageRate @1 :UInt16;
    onOff @2 :UInt8;
}


struct ManualControl {
    target @0 :UInt8;
    x @1 :Int16;
    y @2 :Int16;
    z @3 :Int16;
    r @4 :Int16;
    buttons @5 :UInt16;
}


struct RcChannelsOverride {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    chan1Raw @2 :UInt16;
    chan2Raw @3 :UInt16;
    chan3Raw @4 :UInt16;
    chan4Raw @5 :UInt16;
    chan5Raw @6 :UInt16;
    chan6Raw @7 :UInt16;
    chan7Raw @8 :UInt16;
    chan8Raw @9 :UInt16;
}


struct MissionItemInt {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    seq @2 :UInt16;
    frame @3 :UInt8;
    command @4 :UInt16;
    current @5 :UInt8;
    autocontinue @6 :UInt8;
    param1 @7 :Float32;
    param2 @8 :Float32;
    param3 @9 :Float32;
    param4 @10 :Float32;
    x @11 :Int32;
    y @12 :Int32;
    z @13 :Float32;
}


struct VfrHud {
    airspeed @0 :Float32;
    groundspeed @1 :Float32;
    heading @2 :Int16;
    throttle @3 :UInt16;
    alt @4 :Float32;
    climb @5 :Float32;
}


struct CommandInt {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    frame @2 :UInt8;
    command @3 :UInt16;
    current @4 :UInt8;
    autocontinue @5 :UInt8;
    param1 @6 :Float32;
    param2 @7 :Float32;
    param3 @8 :Float32;
    param4 @9 :Float32;
    x @10 :Int32;
    y @11 :Int32;
    z @12 :Float32;
}


struct CommandLong {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    command @2 :UInt16;
    confirmation @3 :UInt8;
    param1 @4 :Float32;
    param2 @5 :Float32;
    param3 @6 :Float32;
    param4 @7 :Float32;
    param5 @8 :Float32;
    param6 @9 :Float32;
    param7 @10 :Float32;
}


struct CommandAck {
    command @0 :UInt16;
    result @1 :UInt8;
}


struct ManualSetpoint {
    timeBootMs @0 :UInt32;
    roll @1 :Float32;
    pitch @2 :Float32;
    yaw @3 :Float32;
    thrust @4 :Float32;
    modeSwitch @5 :UInt8;
    manualOverrideSwitch @6 :UInt8;
}


struct SetAttitudeTarget {
    timeBootMs @0 :UInt32;
    targetSystem @1 :UInt8;
    targetComponent @2 :UInt8;
    typeMask @3 :UInt8;
    q @4 :Float32;
    bodyRollRate @5 :Float32;
    bodyPitchRate @6 :Float32;
    bodyYawRate @7 :Float32;
    thrust @8 :Float32;
}


struct AttitudeTarget {
    timeBootMs @0 :UInt32;
    typeMask @1 :UInt8;
    q @2 :Float32;
    bodyRollRate @3 :Float32;
    bodyPitchRate @4 :Float32;
    bodyYawRate @5 :Float32;
    thrust @6 :Float32;
}


struct SetPositionTargetLocalNed {
    timeBootMs @0 :UInt32;
    targetSystem @1 :UInt8;
    targetComponent @2 :UInt8;
    coordinateFrame @3 :UInt8;
    typeMask @4 :UInt16;
    x @5 :Float32;
    y @6 :Float32;
    z @7 :Float32;
    vx @8 :Float32;
    vy @9 :Float32;
    vz @10 :Float32;
    afx @11 :Float32;
    afy @12 :Float32;
    afz @13 :Float32;
    yaw @14 :Float32;
    yawRate @15 :Float32;
}


struct PositionTargetLocalNed {
    timeBootMs @0 :UInt32;
    coordinateFrame @1 :UInt8;
    typeMask @2 :UInt16;
    x @3 :Float32;
    y @4 :Float32;
    z @5 :Float32;
    vx @6 :Float32;
    vy @7 :Float32;
    vz @8 :Float32;
    afx @9 :Float32;
    afy @10 :Float32;
    afz @11 :Float32;
    yaw @12 :Float32;
    yawRate @13 :Float32;
}


struct SetPositionTargetGlobalInt {
    timeBootMs @0 :UInt32;
    targetSystem @1 :UInt8;
    targetComponent @2 :UInt8;
    coordinateFrame @3 :UInt8;
    typeMask @4 :UInt16;
    latInt @5 :Int32;
    lonInt @6 :Int32;
    alt @7 :Float32;
    vx @8 :Float32;
    vy @9 :Float32;
    vz @10 :Float32;
    afx @11 :Float32;
    afy @12 :Float32;
    afz @13 :Float32;
    yaw @14 :Float32;
    yawRate @15 :Float32;
}


struct PositionTargetGlobalInt {
    timeBootMs @0 :UInt32;
    coordinateFrame @1 :UInt8;
    typeMask @2 :UInt16;
    latInt @3 :Int32;
    lonInt @4 :Int32;
    alt @5 :Float32;
    vx @6 :Float32;
    vy @7 :Float32;
    vz @8 :Float32;
    afx @9 :Float32;
    afy @10 :Float32;
    afz @11 :Float32;
    yaw @12 :Float32;
    yawRate @13 :Float32;
}


struct LocalPositionNedSystemGlobalOffset {
    timeBootMs @0 :UInt32;
    x @1 :Float32;
    y @2 :Float32;
    z @3 :Float32;
    roll @4 :Float32;
    pitch @5 :Float32;
    yaw @6 :Float32;
}


struct HilState {
    timeUsec @0 :UInt64;
    roll @1 :Float32;
    pitch @2 :Float32;
    yaw @3 :Float32;
    rollspeed @4 :Float32;
    pitchspeed @5 :Float32;
    yawspeed @6 :Float32;
    lat @7 :Int32;
    lon @8 :Int32;
    alt @9 :Int32;
    vx @10 :Int16;
    vy @11 :Int16;
    vz @12 :Int16;
    xacc @13 :Int16;
    yacc @14 :Int16;
    zacc @15 :Int16;
}


struct HilControls {
    timeUsec @0 :UInt64;
    rollAilerons @1 :Float32;
    pitchElevator @2 :Float32;
    yawRudder @3 :Float32;
    throttle @4 :Float32;
    aux1 @5 :Float32;
    aux2 @6 :Float32;
    aux3 @7 :Float32;
    aux4 @8 :Float32;
    mode @9 :UInt8;
    navMode @10 :UInt8;
}


struct HilRcInputsRaw {
    timeUsec @0 :UInt64;
    chan1Raw @1 :UInt16;
    chan2Raw @2 :UInt16;
    chan3Raw @3 :UInt16;
    chan4Raw @4 :UInt16;
    chan5Raw @5 :UInt16;
    chan6Raw @6 :UInt16;
    chan7Raw @7 :UInt16;
    chan8Raw @8 :UInt16;
    chan9Raw @9 :UInt16;
    chan10Raw @10 :UInt16;
    chan11Raw @11 :UInt16;
    chan12Raw @12 :UInt16;
    rssi @13 :UInt8;
}


struct OpticalFlow {
    timeUsec @0 :UInt64;
    sensorId @1 :UInt8;
    flowX @2 :Int16;
    flowY @3 :Int16;
    flowCompMX @4 :Float32;
    flowCompMY @5 :Float32;
    quality @6 :UInt8;
    groundDistance @7 :Float32;
}


struct GlobalVisionPositionEstimate {
    usec @0 :UInt64;
    x @1 :Float32;
    y @2 :Float32;
    z @3 :Float32;
    roll @4 :Float32;
    pitch @5 :Float32;
    yaw @6 :Float32;
}


struct VisionPositionEstimate {
    usec @0 :UInt64;
    x @1 :Float32;
    y @2 :Float32;
    z @3 :Float32;
    roll @4 :Float32;
    pitch @5 :Float32;
    yaw @6 :Float32;
}


struct VisionSpeedEstimate {
    usec @0 :UInt64;
    x @1 :Float32;
    y @2 :Float32;
    z @3 :Float32;
}


struct ViconPositionEstimate {
    usec @0 :UInt64;
    x @1 :Float32;
    y @2 :Float32;
    z @3 :Float32;
    roll @4 :Float32;
    pitch @5 :Float32;
    yaw @6 :Float32;
}


struct HighresImu {
    timeUsec @0 :UInt64;
    xacc @1 :Float32;
    yacc @2 :Float32;
    zacc @3 :Float32;
    xgyro @4 :Float32;
    ygyro @5 :Float32;
    zgyro @6 :Float32;
    xmag @7 :Float32;
    ymag @8 :Float32;
    zmag @9 :Float32;
    absPressure @10 :Float32;
    diffPressure @11 :Float32;
    pressureAlt @12 :Float32;
    temperature @13 :Float32;
    fieldsUpdated @14 :UInt16;
}


struct OpticalFlowRad {
    timeUsec @0 :UInt64;
    sensorId @1 :UInt8;
    integrationTimeUs @2 :UInt32;
    integratedX @3 :Float32;
    integratedY @4 :Float32;
    integratedXgyro @5 :Float32;
    integratedYgyro @6 :Float32;
    integratedZgyro @7 :Float32;
    temperature @8 :Int16;
    quality @9 :UInt8;
    timeDeltaDistanceUs @10 :UInt32;
    distance @11 :Float32;
}


struct HilSensor {
    timeUsec @0 :UInt64;
    xacc @1 :Float32;
    yacc @2 :Float32;
    zacc @3 :Float32;
    xgyro @4 :Float32;
    ygyro @5 :Float32;
    zgyro @6 :Float32;
    xmag @7 :Float32;
    ymag @8 :Float32;
    zmag @9 :Float32;
    absPressure @10 :Float32;
    diffPressure @11 :Float32;
    pressureAlt @12 :Float32;
    temperature @13 :Float32;
    fieldsUpdated @14 :UInt32;
}


struct SimState {
    q1 @0 :Float32;
    q2 @1 :Float32;
    q3 @2 :Float32;
    q4 @3 :Float32;
    roll @4 :Float32;
    pitch @5 :Float32;
    yaw @6 :Float32;
    xacc @7 :Float32;
    yacc @8 :Float32;
    zacc @9 :Float32;
    xgyro @10 :Float32;
    ygyro @11 :Float32;
    zgyro @12 :Float32;
    lat @13 :Float32;
    lon @14 :Float32;
    alt @15 :Float32;
    stdDevHorz @16 :Float32;
    stdDevVert @17 :Float32;
    vn @18 :Float32;
    ve @19 :Float32;
    vd @20 :Float32;
}


struct RadioStatus {
    rssi @0 :UInt8;
    remrssi @1 :UInt8;
    txbuf @2 :UInt8;
    noise @3 :UInt8;
    remnoise @4 :UInt8;
    rxerrors @5 :UInt16;
    fixed @6 :UInt16;
}


struct FileTransferProtocol {
    targetNetwork @0 :UInt8;
    targetSystem @1 :UInt8;
    targetComponent @2 :UInt8;
    payload @3 :UInt8;
}


struct Timesync {
    tc1 @0 :Int64;
    ts1 @1 :Int64;
}


struct HilGps {
    timeUsec @0 :UInt64;
    fixType @1 :UInt8;
    lat @2 :Int32;
    lon @3 :Int32;
    alt @4 :Int32;
    eph @5 :UInt16;
    epv @6 :UInt16;
    vel @7 :UInt16;
    vn @8 :Int16;
    ve @9 :Int16;
    vd @10 :Int16;
    cog @11 :UInt16;
    satellitesVisible @12 :UInt8;
}


struct HilOpticalFlow {
    timeUsec @0 :UInt64;
    sensorId @1 :UInt8;
    integrationTimeUs @2 :UInt32;
    integratedX @3 :Float32;
    integratedY @4 :Float32;
    integratedXgyro @5 :Float32;
    integratedYgyro @6 :Float32;
    integratedZgyro @7 :Float32;
    temperature @8 :Int16;
    quality @9 :UInt8;
    timeDeltaDistanceUs @10 :UInt32;
    distance @11 :Float32;
}


struct HilStateQuaternion {
    timeUsec @0 :UInt64;
    attitudeQuaternion @1 :Float32;
    rollspeed @2 :Float32;
    pitchspeed @3 :Float32;
    yawspeed @4 :Float32;
    lat @5 :Int32;
    lon @6 :Int32;
    alt @7 :Int32;
    vx @8 :Int16;
    vy @9 :Int16;
    vz @10 :Int16;
    indAirspeed @11 :UInt16;
    trueAirspeed @12 :UInt16;
    xacc @13 :Int16;
    yacc @14 :Int16;
    zacc @15 :Int16;
}


struct ScaledImu2 {
    timeBootMs @0 :UInt32;
    xacc @1 :Int16;
    yacc @2 :Int16;
    zacc @3 :Int16;
    xgyro @4 :Int16;
    ygyro @5 :Int16;
    zgyro @6 :Int16;
    xmag @7 :Int16;
    ymag @8 :Int16;
    zmag @9 :Int16;
}


struct LogRequestList {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    start @2 :UInt16;
    end @3 :UInt16;
}


struct LogEntry {
    id @0 :UInt16;
    numLogs @1 :UInt16;
    lastLogNum @2 :UInt16;
    timeUtc @3 :UInt32;
    size @4 :UInt32;
}


struct LogRequestData {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    id @2 :UInt16;
    ofs @3 :UInt32;
    count @4 :UInt32;
}


struct LogData {
    id @0 :UInt16;
    ofs @1 :UInt32;
    count @2 :UInt8;
    data @3 :UInt8;
}


struct LogErase {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
}


struct LogRequestEnd {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
}


struct GpsInjectData {
    targetSystem @0 :UInt8;
    targetComponent @1 :UInt8;
    len @2 :UInt8;
    data @3 :UInt8;
}


struct Gps2Raw {
    timeUsec @0 :UInt64;
    fixType @1 :UInt8;
    lat @2 :Int32;
    lon @3 :Int32;
    alt @4 :Int32;
    eph @5 :UInt16;
    epv @6 :UInt16;
    vel @7 :UInt16;
    cog @8 :UInt16;
    satellitesVisible @9 :UInt8;
    dgpsNumch @10 :UInt8;
    dgpsAge @11 :UInt32;
}


struct PowerStatus {
    vcc @0 :UInt16;
    vservo @1 :UInt16;
    flags @2 :UInt16;
}


struct SerialControl {
    device @0 :UInt8;
    flags @1 :UInt8;
    timeout @2 :UInt16;
    baudrate @3 :UInt32;
    count @4 :UInt8;
    data @5 :UInt8;
}


struct GpsRtk {
    timeLastBaselineMs @0 :UInt32;
    rtkReceiverId @1 :UInt8;
    wn @2 :UInt16;
    tow @3 :UInt32;
    rtkHealth @4 :UInt8;
    rtkRate @5 :UInt8;
    nsats @6 :UInt8;
    baselineCoordsType @7 :UInt8;
    baselineAMm @8 :Int32;
    baselineBMm @9 :Int32;
    baselineCMm @10 :Int32;
    accuracy @11 :UInt32;
    iarNumHypotheses @12 :Int32;
}


struct Gps2Rtk {
    timeLastBaselineMs @0 :UInt32;
    rtkReceiverId @1 :UInt8;
    wn @2 :UInt16;
    tow @3 :UInt32;
    rtkHealth @4 :UInt8;
    rtkRate @5 :UInt8;
    nsats @6 :UInt8;
    baselineCoordsType @7 :UInt8;
    baselineAMm @8 :Int32;
    baselineBMm @9 :Int32;
    baselineCMm @10 :Int32;
    accuracy @11 :UInt32;
    iarNumHypotheses @12 :Int32;
}


struct ScaledImu3 {
    timeBootMs @0 :UInt32;
    xacc @1 :Int16;
    yacc @2 :Int16;
    zacc @3 :Int16;
    xgyro @4 :Int16;
    ygyro @5 :Int16;
    zgyro @6 :Int16;
    xmag @7 :Int16;
    ymag @8 :Int16;
    zmag @9 :Int16;
}


struct DataTransmissionHandshake {
    type @0 :UInt8;
    size @1 :UInt32;
    width @2 :UInt16;
    height @3 :UInt16;
    packets @4 :UInt16;
    payload @5 :UInt8;
    jpgQuality @6 :UInt8;
}


struct EncapsulatedData {
    seqnr @0 :UInt16;
    data @1 :UInt8;
}


struct DistanceSensor {
    timeBootMs @0 :UInt32;
    minDistance @1 :UInt16;
    maxDistance @2 :UInt16;
    currentDistance @3 :UInt16;
    type @4 :UInt8;
    id @5 :UInt8;
    orientation @6 :UInt8;
    covariance @7 :UInt8;
}


struct TerrainRequest {
    lat @0 :Int32;
    lon @1 :Int32;
    gridSpacing @2 :UInt16;
    mask @3 :UInt64;
}


struct TerrainData {
    lat @0 :Int32;
    lon @1 :Int32;
    gridSpacing @2 :UInt16;
    gridbit @3 :UInt8;
    data @4 :Int16;
}


struct TerrainCheck {
    lat @0 :Int32;
    lon @1 :Int32;
}


struct TerrainReport {
    lat @0 :Int32;
    lon @1 :Int32;
    spacing @2 :UInt16;
    terrainHeight @3 :Float32;
    currentHeight @4 :Float32;
    pending @5 :UInt16;
    loaded @6 :UInt16;
}


struct ScaledPressure2 {
    timeBootMs @0 :UInt32;
    pressAbs @1 :Float32;
    pressDiff @2 :Float32;
    temperature @3 :Int16;
}


struct AttPosMocap {
    timeUsec @0 :UInt64;
    q @1 :Float32;
    x @2 :Float32;
    y @3 :Float32;
    z @4 :Float32;
}


struct SetActuatorControlTarget {
    timeUsec @0 :UInt64;
    groupMlx @1 :UInt8;
    targetSystem @2 :UInt8;
    targetComponent @3 :UInt8;
    controls @4 :Float32;
}


struct ActuatorControlTarget {
    timeUsec @0 :UInt64;
    groupMlx @1 :UInt8;
    controls @2 :Float32;
}


struct BatteryStatus {
    id @0 :UInt8;
    batteryFunction @1 :UInt8;
    type @2 :UInt8;
    temperature @3 :Int16;
    voltages @4 :UInt16;
    currentBattery @5 :Int16;
    currentConsumed @6 :Int32;
    energyConsumed @7 :Int32;
    batteryRemaining @8 :Int8;
}


struct AutopilotVersion {
    capabilities @0 :UInt64;
    flightSwVersion @1 :UInt32;
    middlewareSwVersion @2 :UInt32;
    osSwVersion @3 :UInt32;
    boardVersion @4 :UInt32;
    flightCustomVersion @5 :UInt8;
    middlewareCustomVersion @6 :UInt8;
    osCustomVersion @7 :UInt8;
    vendorId @8 :UInt16;
    productId @9 :UInt16;
    uid @10 :UInt64;
}


struct V2Extension {
    targetNetwork @0 :UInt8;
    targetSystem @1 :UInt8;
    targetComponent @2 :UInt8;
    messageType @3 :UInt16;
    payload @4 :UInt8;
}


struct MemoryVect {
    address @0 :UInt16;
    ver @1 :UInt8;
    type @2 :UInt8;
    value @3 :Int8;
}


struct DebugVect {
    name @0 :Text;
    timeUsec @1 :UInt64;
    x @2 :Float32;
    y @3 :Float32;
    z @4 :Float32;
}


struct NamedValueFloat {
    timeBootMs @0 :UInt32;
    name @1 :Text;
    value @2 :Float32;
}


struct NamedValueInt {
    timeBootMs @0 :UInt32;
    name @1 :Text;
    value @2 :Int32;
}


struct Statustext {
    severity @0 :UInt8;
    text @1 :Text;
}


struct Debug {
    timeBootMs @0 :UInt32;
    ind @1 :UInt8;
    value @2 :Float32;
}


struct Message {
    sequence @0 :UInt8;
    systemID @1 :UInt8;
    componentID @2 :UInt8;
    messageID @3 :UInt8;
    crc @4 :UInt16;
    payload :union {
        heartbeat @5 :Heartbeat;
        sysStatus @6 :SysStatus;
        systemTime @7 :SystemTime;
        ping @8 :Ping;
        changeOperatorControl @9 :ChangeOperatorControl;
        changeOperatorControlAck @10 :ChangeOperatorControlAck;
        authKey @11 :AuthKey;
        setMode @12 :SetMode;
        paramRequestRead @13 :ParamRequestRead;
        paramRequestList @14 :ParamRequestList;
        paramValue @15 :ParamValue;
        paramSet @16 :ParamSet;
        gpsRawInt @17 :GpsRawInt;
        gpsStatus @18 :GpsStatus;
        scaledImu @19 :ScaledImu;
        rawImu @20 :RawImu;
        rawPressure @21 :RawPressure;
        scaledPressure @22 :ScaledPressure;
        attitude @23 :Attitude;
        attitudeQuaternion @24 :AttitudeQuaternion;
        localPositionNed @25 :LocalPositionNed;
        globalPositionInt @26 :GlobalPositionInt;
        rcChannelsScaled @27 :RcChannelsScaled;
        rcChannelsRaw @28 :RcChannelsRaw;
        servoOutputRaw @29 :ServoOutputRaw;
        missionRequestPartialList @30 :MissionRequestPartialList;
        missionWritePartialList @31 :MissionWritePartialList;
        missionItem @32 :MissionItem;
        missionRequest @33 :MissionRequest;
        missionSetCurrent @34 :MissionSetCurrent;
        missionCurrent @35 :MissionCurrent;
        missionRequestList @36 :MissionRequestList;
        missionCount @37 :MissionCount;
        missionClearAll @38 :MissionClearAll;
        missionItemReached @39 :MissionItemReached;
        missionAck @40 :MissionAck;
        setGpsGlobalOrigin @41 :SetGpsGlobalOrigin;
        gpsGlobalOrigin @42 :GpsGlobalOrigin;
        paramMapRc @43 :ParamMapRc;
        safetySetAllowedArea @44 :SafetySetAllowedArea;
        safetyAllowedArea @45 :SafetyAllowedArea;
        attitudeQuaternionCov @46 :AttitudeQuaternionCov;
        navControllerOutput @47 :NavControllerOutput;
        globalPositionIntCov @48 :GlobalPositionIntCov;
        localPositionNedCov @49 :LocalPositionNedCov;
        rcChannels @50 :RcChannels;
        requestDataStream @51 :RequestDataStream;
        dataStream @52 :DataStream;
        manualControl @53 :ManualControl;
        rcChannelsOverride @54 :RcChannelsOverride;
        missionItemInt @55 :MissionItemInt;
        vfrHud @56 :VfrHud;
        commandInt @57 :CommandInt;
        commandLong @58 :CommandLong;
        commandAck @59 :CommandAck;
        manualSetpoint @60 :ManualSetpoint;
        setAttitudeTarget @61 :SetAttitudeTarget;
        attitudeTarget @62 :AttitudeTarget;
        setPositionTargetLocalNed @63 :SetPositionTargetLocalNed;
        positionTargetLocalNed @64 :PositionTargetLocalNed;
        setPositionTargetGlobalInt @65 :SetPositionTargetGlobalInt;
        positionTargetGlobalInt @66 :PositionTargetGlobalInt;
        localPositionNedSystemGlobalOffset @67 :LocalPositionNedSystemGlobalOffset;
        hilState @68 :HilState;
        hilControls @69 :HilControls;
        hilRcInputsRaw @70 :HilRcInputsRaw;
        opticalFlow @71 :OpticalFlow;
        globalVisionPositionEstimate @72 :GlobalVisionPositionEstimate;
        visionPositionEstimate @73 :VisionPositionEstimate;
        visionSpeedEstimate @74 :VisionSpeedEstimate;
        viconPositionEstimate @75 :ViconPositionEstimate;
        highresImu @76 :HighresImu;
        opticalFlowRad @77 :OpticalFlowRad;
        hilSensor @78 :HilSensor;
        simState @79 :SimState;
        radioStatus @80 :RadioStatus;
        fileTransferProtocol @81 :FileTransferProtocol;
        timesync @82 :Timesync;
        hilGps @83 :HilGps;
        hilOpticalFlow @84 :HilOpticalFlow;
        hilStateQuaternion @85 :HilStateQuaternion;
        scaledImu2 @86 :ScaledImu2;
        logRequestList @87 :LogRequestList;
        logEntry @88 :LogEntry;
        logRequestData @89 :LogRequestData;
        logData @90 :LogData;
        logErase @91 :LogErase;
        logRequestEnd @92 :LogRequestEnd;
        gpsInjectData @93 :GpsInjectData;
        gps2Raw @94 :Gps2Raw;
        powerStatus @95 :PowerStatus;
        serialControl @96 :SerialControl;
        gpsRtk @97 :GpsRtk;
        gps2Rtk @98 :Gps2Rtk;
        scaledImu3 @99 :ScaledImu3;
        dataTransmissionHandshake @100 :DataTransmissionHandshake;
        encapsulatedData @101 :EncapsulatedData;
        distanceSensor @102 :DistanceSensor;
        terrainRequest @103 :TerrainRequest;
        terrainData @104 :TerrainData;
        terrainCheck @105 :TerrainCheck;
        terrainReport @106 :TerrainReport;
        scaledPressure2 @107 :ScaledPressure2;
        attPosMocap @108 :AttPosMocap;
        setActuatorControlTarget @109 :SetActuatorControlTarget;
        actuatorControlTarget @110 :ActuatorControlTarget;
        batteryStatus @111 :BatteryStatus;
        autopilotVersion @112 :AutopilotVersion;
        v2Extension @113 :V2Extension;
        memoryVect @114 :MemoryVect;
        debugVect @115 :DebugVect;
        namedValueFloat @116 :NamedValueFloat;
        namedValueInt @117 :NamedValueInt;
        statustext @118 :Statustext;
        debug @119 :Debug;
    }
}

